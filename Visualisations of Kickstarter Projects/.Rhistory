View(negativecollapsed)
View(positivecollapsed)
View(negativecollapsed)
negativecollapsed <- as.data.frame(as.character(collapse(negativeblurbs$blurb, sep = ";;;")))
View(negativecollapsed)
negativecollapsed <- as.vector(collapse(negativeblurbs$blurb, sep = ";;;"))
negativecollapsed
as.data.frame(negativecollapsed)
negativecollapsed <- as.data.frame(as.vector(collapse(negativeblurbs$blurb, sep = ";;;")))
View(negativecollapsed)
negativecollapsed <- as.vector(collapse(negativeblurbs$blurb, sep = ";;;"))
test <- as.data.frame(negativecollapsed)
View(test)
positivecollapsed <- as.vector(collapse(positiveblurbs$blurb, sep = ";;;"))
negativecollapsed <- as.vector(collapse(negativeblurbs$blurb, sep = ";;;"))
collapsedblurbs <- c("positivecollapsed", "negativecollapsed")
collapsedblurbs <- c(positivecollapsed, negativecollapsed)
collapsedblurbs
collapsedblurbs <- as.data.frame(collapsedblurbs)
View(collapsedblurbs)
collapsedblurbs <- c(positivecollapsed, negativecollapsed)
collapsedblurbs
collapsedblurbs <- rbind(positivecollapsed, negativecollapsed)
View(collapsedblurbs)
collapsedblurbs <- add_rownames(collapsedblurbs, "doc_id")
collapsedblurbs$text <- collapsedblurbs$V1
require(dplyr)
collapsedblurbs <- add_rownames(collapsedblurbs, "doc_id")
collapsedblurbs <- rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs <- tibble::rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs <- as.dataframe(rbind(positivecollapsed, negativecollapsed))
collapsedblurbs <- as.data.frame(rbind(positivecollapsed, negativecollapsed))
collapsedblurbs <- tibble::rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs$text <- collapsedblurbs$V1
View(collapsedblurbs)
collapsedblurbs_source <- DataframeSource(collapsedblurbs)
collapsedblurbs_corpus <- VCorpus(collapsedblurbs_source)
require(tm)
collapsedblurbs_source <- DataframeSource(collapsedblurbs)
collapsedblurbs_corpus <- VCorpus(collapsedblurbs_source)
collapsedblurbs_clean <- clean_corpus(collapsedblurbs_corpus)
collapsedblurbs_stemmed <- tm_map(collapsedblurbs_clean, stemDocument)
collapsedblurbs_stemmed[[1]][1]
collapsedblurbs_stemmed[[2]][1]
collapsedblurbs_compl <- lapply(collapsedblurbs_stemmed, stemCompletion2, dictionary=collapsedblurbs_clean)
collapsedblurbs_all <- as.VCorpus(collapsedblurbs_compl)
for (i in 1:dim(collapsedblurbs)[1]){
collapsedblurbs[[i]]$meta$id <- collapsedblurbs[i,"doc_id"]}
collapsedblurbs_dtm <- DocumentTermMatrix(collapsedblurbs_all)
for (i in 1:dim(collapsedblurbs)[1]){
collapsedblurbs_all[[i]]$meta$id <- collapsedblurbs[i,"doc_id"]}
collapsedblurbs_dtm <- DocumentTermMatrix(collapsedblurbs_all)
collapsedblurbs_m <- as.matrix(collapsedblurbs_dtm)
View(collapsedblurbs_m)
comparison.cloud(ollapsedblurbs_m, colors = c("orange", "blue"),
scale=c(0.1,2), title.size= 1,
max.words = 100)
require(wordclour)
require(wordcloud)
comparison.cloud(ollapsedblurbs_m, colors = c("orange", "blue"),
scale=c(0.1,2), title.size= 1,
max.words = 100)
comparison.cloud(collapsedblurbs_m, colors = c("orange", "blue"),
scale=c(0.1,2), title.size= 1,
max.words = 100)
collapsedblurbs_tdm <- TermDocumentMatrix(collapsedblurbs_all)
collapsedblurbs_m <- as.matrix(collapsedblurbs_tdm)
comparison.cloud(collapsedblurbs_m, colors = c("orange", "blue"),
scale=c(0.1,2), title.size= 1,
max.words = 100)
layout(matrix(nrow=1, ncol=1))
par(mfrow=c(1,1))
comparison.cloud(collapsedblurbs_m, colors = c("orange", "blue"), scale=c(0.1,2), title.size= 1, max.words = 50)
comparison.cloud(collapsedblurbs_m, colors = c("orange", "blue"), scale=c(0.1,2), title.size= 1, max.words = 100)
comparison.cloud(collapsedblurbs_m, colors = c("navyblue", "indianred"), scale=c(0.1,2), title.size= 1, max.words = 100)
set.seed(2103)
comparison.cloud(collapsedblurbs_m, colors = c("navyblue", "indianred"), scale=c(0.1,1.5), title.size= 1, max.words = 100)
comparison.cloud(collapsedblurbs_m, colors = c("navyblue", "indianred"), scale=c(0.1,1.8), title.size= 1, max.words = 100)
comparison.cloud(collapsedblurbs_m, colors = c("navyblue", "indianred"), scale=c(0.1,1.7), title.size= 1, max.words = 100)
positiveblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment>0)
negativeblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment<=0)
PositiveBlurbs <- as.vector(collapse(positiveblurbs$blurb, sep = ";;;"))
NegativeBlurbs <- as.vector(collapse(negativeblurbs$blurb, sep = ";;;"))
collapsedblurbs <- as.dataframe(rbind(PositiveBlurbs, NegativeBlurbs))
collapsedblurbs <- tibble::rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs$text <- collapsedblurbs$V1
collapsedblurbs_source <- DataframeSource(collapsedblurbs)
collapsedblurbs_corpus <- VCorpus(collapsedblurbs_source)
collapsedblurbs_clean <- clean_corpus(collapsedblurbs_corpus)
collapsedblurbs_stemmed <- tm_map(collapsedblurbs_clean, stemDocument)
collapsedblurbs_compl <- lapply(collapsedblurbs_stemmed, stemCompletion2, dictionary=collapsedblurbs_clean)
positiveblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment>0)
negativeblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment<=0)
PositiveBlurbs <- as.vector(collapse(as.character(positiveblurbs$blurb), sep = ";;;"))
NegativeBlurbs <- as.vector(collapse(as.character(negativeblurbs$blurb), sep = ";;;"))
collapsedblurbs <- as.dataframe(rbind(PositiveBlurbs, NegativeBlurbs))
collapsedblurbs <- tibble::rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs$text <- collapsedblurbs$V1
collapsedblurbs_source <- DataframeSource(collapsedblurbs)
collapsedblurbs_corpus <- VCorpus(collapsedblurbs_source)
collapsedblurbs_clean <- clean_corpus(collapsedblurbs_corpus)
collapsedblurbs_stemmed <- tm_map(collapsedblurbs_clean, stemDocument)
collapsedblurbs_compl <- lapply(collapsedblurbs_stemmed, stemCompletion2, dictionary=collapsedblurbs_clean)
View(negativeblurbs)
positiveblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment>0)
negativeblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment<=0)
PositiveBlurbs <- as.vector(collapse(positiveblurbs_uncollapsed$blurb, sep = ";;;"))
NegativeBlurbs <- as.vector(collapse(negativeblurbs_uncollapsed$blurb, sep = ";;;"))
collapsedblurbs <- as.dataframe(rbind(PositiveBlurbs, NegativeBlurbs))
collapsedblurbs <- tibble::rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs$text <- collapsedblurbs$V1
collapsedblurbs_source <- DataframeSource(collapsedblurbs)
collapsedblurbs_corpus <- VCorpus(collapsedblurbs_source)
collapsedblurbs_clean <- clean_corpus(collapsedblurbs_corpus)
collapsedblurbs_stemmed <- tm_map(collapsedblurbs_clean, stemDocument)
collapsedblurbs_compl <- lapply(collapsedblurbs_stemmed, stemCompletion2, dictionary=collapsedblurbs_clean)
View(positiveblurbs_uncollapsed)
PositiveBlurbs <- as.vector(collapse(as.character(positiveblurbs_uncollapsed$blurb), sep = ";;;"))
NegativeBlurbs <- as.vector(collapse(as.character(negativeblurbs_uncollapsed$blurb), sep = ";;;"))
require(glue)
PositiveBlurbs <- as.vector(collapse(as.character(positiveblurbs_uncollapsed$blurb), sep = ";;;"))
NegativeBlurbs <- as.vector(collapse(as.character(negativeblurbs_uncollapsed$blurb), sep = ";;;"))
PositiveBlurbs <- as.vector(collapse(as.string(positiveblurbs_uncollapsed$blurb), sep = ";;;"))
NegativeBlurbs <- as.vector(collapse(as.String(negativeblurbs_uncollapsed$blurb), sep = ";;;"))
test <- c("hello", "world", "test")
NegativeBlurbs <- as.vector(collapse(test, sep = ";;;"))
NegativeBlurbs <- as.vector(glue::collapse(test, sep = ";;;"))
positiveblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment>0)
negativeblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment<=0)
PositiveBlurbs <- as.vector(glue::collapse(as.character(positiveblurbs_uncollapsed$blurb), sep = ";;;"))
NegativeBlurbs <- as.vector(glue::collapse(as.character(negativeblurbs_uncollapsed$blurb), sep = ";;;"))
collapsedblurbs <- as.dataframe(rbind(PositiveBlurbs, NegativeBlurbs))
collapsedblurbs <- tibble::rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs$text <- collapsedblurbs$V1
collapsedblurbs_source <- DataframeSource(collapsedblurbs)
collapsedblurbs_corpus <- VCorpus(collapsedblurbs_source)
collapsedblurbs_clean <- clean_corpus(collapsedblurbs_corpus)
collapsedblurbs_stemmed <- tm_map(collapsedblurbs_clean, stemDocument)
collapsedblurbs_compl <- lapply(collapsedblurbs_stemmed, stemCompletion2, dictionary=collapsedblurbs_clean)
positiveblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment>0)
negativeblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment<=0)
PositiveBlurbs <- as.vector(glue::collapse(as.character(positiveblurbs_uncollapsed$blurb), sep = ";;;"))
NegativeBlurbs <- as.vector(glue::collapse(as.character(negativeblurbs_uncollapsed$blurb), sep = ";;;"))
collapsedblurbs <- as.data.frame(rbind(PositiveBlurbs, NegativeBlurbs))
collapsedblurbs <- tibble::rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs$text <- collapsedblurbs$V1
collapsedblurbs_source <- DataframeSource(collapsedblurbs)
collapsedblurbs_corpus <- VCorpus(collapsedblurbs_source)
collapsedblurbs_clean <- clean_corpus(collapsedblurbs_corpus)
collapsedblurbs_stemmed <- tm_map(collapsedblurbs_clean, stemDocument)
collapsedblurbs_compl <- lapply(collapsedblurbs_stemmed, stemCompletion2, dictionary=collapsedblurbs_clean)
collapsedblurbs_all <- as.VCorpus(collapsedblurbs_compl)
for (i in 1:dim(collapsedblurbs)[1]){
collapsedblurbs_all[[i]]$meta$id <- collapsedblurbs[i,"doc_id"]}
collapsedblurbs_tdm <- TermDocumentMatrix(collapsedblurbs_all)
collapsedblurbs_m <- as.matrix(collapsedblurbs_tdm)
par(mfrow=c(1,1))
set.seed(2103)
comparison.cloud(collapsedblurbs_m, colors = c("navyblue", "indianred"), scale=c(0.1,1.7), title.size= 1, max.words = 100, family="Garamond")
require(tidytext)
sentiments
tidytext::sentiments
dictionary <- subset(tidytext::sentiments, lexicon=="nrc")
View(dictionary)
dictionary <- get_sentiments("nrc")
DTM_dictionary <- dfm(sampleproj_all, dictionary=RID_dictionary)
require(quanteda)
DTM_dictionary <- dfm(sampleproj_all, dictionary=dictionary)
sampleproj_all_quanteda <- corpus(sampleproj_all)
sampleproj_all_emotion <- dfm(sampleproj_all_quanteda, dictionary=dictionary)
dictionary <- spread(get_sentiments("nrc"), sentiment, word)
require(tidyr)
dictionary <- spread(get_sentiments("nrc"), sentiment, word)
dictionary <- spread(get_sentiments("nrc"), word, sentiment)
dictionary <- spread(get_sentiments("nrc")[c(1,2),], sentiment, word)
dictionary <- spread(get_sentiments("nrc")[c(1:5),], sentiment, word)
dictionary <- spread(get_sentiments("nrc")[c(1:10),], sentiment, word)
dictionary <- spread(get_sentiments("nrc")[c(1:8),], sentiment, word)
dictionary <- spread(get_sentiments("nrc")[c(1:6),], sentiment, word)
dictionary <- get_sentiments("nrc")
dictionary <- spread(get_sentiments("nrc")[c(5:9),], sentiment, word)
dictionary <- get_sentiments("nrc") %>% mutate(id=1:n()) %>% spread(sentiment, word)
myDict <- dictionary(dictionary)
test <- apply(dictionary, 2, as.list)
test
myDict <- dictionary(test)
test <- lapply(test, function(x) x[!is.na(x)])
test
myDict <- dictionary(test)
sampleproj_all_emotion <- dfm(sampleproj_all_quanteda, dictionary=test)
sampleproj_all_emotion <- dfm(sampleproj_all_quanteda, dictionary=myDict)
sampleproj_all_emotion
sampleproj_all_emotion$features
sampleproj_all_emotion@Dimnames$features
head(sampleproj_all_emotion@Dimnames)
require(reshape2)
sampleproj_all_emotion_m <- melt(as.matrix(sampleproj_all_emotion_dfm))
sampleproj_all_emotion_m <- melt(as.matrix(sampleproj_all_emotion))
View(sampleproj_all_emotion_m)
sampleproj_all_emotion_m <- sampleproj_all_emotion_m[-c(features=="id"),]
sampleproj_all_emotion_m <- sampleproj_all_emotion_m[-c(sampleproj_all_emotion_m$features=="id"),]
View(sampleproj_all_emotion_m)
sampleproj_all_emotion_m <- subset(sampleproj_all_emotion_m, features!="id")
View(sampleproj_all_emotion_m)
sampleproj_all_emotion_df_wmeta <- merge(sampleproj_all_emotion_df, sampleproj_wreadability_wsentiment, by.x="docs", by.y="id")
sampleproj_all_emotion_df_wmeta <- merge(sampleproj_all_emotion_m, sampleproj_wreadability_wsentiment, by.x="docs", by.y="id")
View(sampleproj_all_emotion_df_wmeta)
sampleproj_all_emotion_df_wmeta <- merge(sampleproj_all_emotion_m, sampleproj_wreadability_wsentiment, by.x="docs", by.y="id", keep.x=T)
View(sampleproj_all_emotion_m)
View(sampleproj_all_emotion_df_wmeta)
View(sampleproj_all_emotion_m)
View(sampleproj_all_emotion_df_wmeta)
View(sampleproj_wreadability_wsentiment)
View(sampleproj_all_emotion_m)
View(sampleproj_wreadability_wsentiment)
sampleproj_all_emotion_df_wmeta <- merge(sampleproj_all_emotion_m, sampleproj_wreadability_wsentiment, by.x="docs", by.y="id", all.x=T)
View(sampleproj_all_emotion_df_wmeta)
View(sampleproj_wreadability_wsentiment)
View(sampleproj_all_emotion_df_wmeta)
test <- as.data.frame(as.matrix(sampleproj_all_emotion_dfm))
test <- as.data.frame(as.matrix(sampleproj_all_emotion))
View(test)
test <- tibble::rownames_to_column(collapsedblurbs, "id")
View(test)
test <- as.data.frame(as.matrix(sampleproj_all_emotion))
test$id <- NULL
test <- tibble::rownames_to_column(test, "id")
View(test)
sampleproj_all_emotion_df_wmeta <- merge(test, sampleproj_wreadability_wsentiment, by="id", all.x=T)
View(sampleproj_all_emotion_df_wmeta)
knitr::opts_chunk$set(echo = TRUE)
require(magrittr)
require(dplyr)
require(ggplot2)
require(ggrepel)
require(ggthemes)
require(extrafont)
require(RColorBrewer)
require(rgdal)
require(leaflet)
require(tm)
require(tidytext)
require(wordcloud)
require(tidyr)
require(quanteda)
require(foreach)
require(glue)
require(reshape2)
kickstarter <- read.csv(file.choose())
kickstarter$uniqid <- paste(kickstarter$blurb, kickstarter$id, sep=" ")
kickstarter <- kickstarter[!duplicated(kickstarter$uniqid),]
coul <- brewer.pal(11, "Spectral")
coul = colorRampPalette(coul)(15)
kickstarter$rank <- rank(-kickstarter$pledged, na.last = TRUE, ties.method = "random")
successfulproj <- subset(kickstarter, kickstarter$rank <= 1000)
unsuccessfulproj <- subset(kickstarter, kickstarter$pledged==0)
unsuccessfulproj <- unsuccessfulproj[sample(nrow(unsuccessfulproj), 1000, replace=FALSE, set.seed(5)), ]
sampleproj <- rbind(successfulproj, unsuccessfulproj)
sampleproj$doc_id <- sampleproj$id
sampleproj$text <- sampleproj$blurb
sampleproj_source <- DataframeSource(sampleproj)
sampleproj_corpus <- VCorpus(sampleproj_source)
removeUppCase <- function(x){gsub("\\b[A-Z]+\\b", "", x)}
removeWebsites <- function(x){gsub("www\\S+\\s*", "", x)}
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, content_transformer(removeWebsites))
corpus <- tm_map(corpus, content_transformer(removeNumbers))
corpus <- tm_map(corpus, content_transformer(removePunctuation))
corpus <- tm_map(corpus, content_transformer(removeUppCase))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(removeWords), c(stopwords("en")))
corpus <- tm_map(corpus, content_transformer(stripWhitespace))
return(corpus)}
sampleproj_clean <- clean_corpus(sampleproj_corpus)
sampleproj_stemmed <- tm_map(sampleproj_clean, stemDocument)
stemCompletion2 <- function(x, dictionary) {
x <- unlist(strsplit(as.character(x), " "))
x <- x[x != ""]
x <- stemCompletion(x, dictionary=dictionary)
x <- paste(x, sep="", collapse=" ")
PlainTextDocument(stripWhitespace(x))}
sampleproj_compl <- lapply(sampleproj_stemmed, stemCompletion2, dictionary=sampleproj_clean)
sampleproj_all <- as.VCorpus(sampleproj_compl)
for (i in 1:dim(sampleproj)[1]){
sampleproj_all[[i]]$meta$id <- sampleproj[i,"id"]}
sampleproj_dtm <- DocumentTermMatrix(sampleproj_all)
sampleproj_td <- tidy(sampleproj_dtm)
sampleproj_tdwmeta <- merge(sampleproj_td, sampleproj, by.x="document", by.y="id")
sampleproj_tf_idf <- sampleproj_td %>% bind_tf_idf(term, document, count) %>% arrange(document)
sampleproj_tdwmeta_wfrequency <- cbind(sampleproj_tdwmeta,sampleproj_tf_idf)
sampleproj_tdwmeta_wfrequency <-sampleproj_tdwmeta_wfrequency[,-c(30:32)]
successfulproj_fulltd <- sampleproj_tdwmeta_wfrequency  %>% filter(pledged>0)
successful_proj_df <- successfulproj_fulltd %>% group_by(term) %>% tally()
unsuccessfulproj_fulltd <- sampleproj_tdwmeta_wfrequency  %>% filter(pledged==0)
unsuccessful_proj_df <- unsuccessfulproj_fulltd %>% group_by(term) %>% tally()
successful_proj_df$rank <- rank(-successful_proj_df$n, na.last = TRUE, ties.method = "min")
successful_proj_df_top20 <- subset(successful_proj_df, successful_proj_df$rank <= 20)
unsuccessful_proj_df$rank <- rank(-unsuccessful_proj_df$n, na.last = TRUE, ties.method = "min")
unsuccessful_proj_df_top20 <- subset(unsuccessful_proj_df, unsuccessful_proj_df$rank <= 20)
successful_proj_df_top20$rank <- NULL
names(successful_proj_df_top20)[2] <- "Successful"
successful_proj_df_top20 <- merge(successful_proj_df_top20 , unsuccessful_proj_df, by="term", all.x=T)
successful_proj_df_top20$rank <- NULL
names(successful_proj_df_top20)[3] <- "Unsuccessful"
successful_proj_df_top20[is.na(successful_proj_df_top20)] <- 0
unsuccessful_proj_df_top20$rank <- NULL
names(unsuccessful_proj_df_top20)[2] <- "Successful"
unsuccessful_proj_df_top20 <- merge(unsuccessful_proj_df_top20 , successful_proj_df, by="term", all.x=T)
unsuccessful_proj_df_top20 $rank <- NULL
names(unsuccessful_proj_df_top20)[3] <- "Unsuccessful"
unsuccessful_proj_df_top20[is.na(unsuccessful_proj_df_top20)] <- 0
wordpyramid_data_wide <- rbind(successful_proj_df_top20, unsuccessful_proj_df_top20)
wordpyramid_data_wide <- wordpyramid_data_wide[!duplicated(wordpyramid_data_wide$term),]
wordpyramid_data_long <- gather(wordpyramid_data_wide, key="successstate", value="n", -term)
ggplot(wordpyramid_data_long, aes(x = reorder(term, -n), y = n, fill = successstate)) + geom_bar(data=subset(wordpyramid_data_long, successstate == "Successful"), stat='identity') +  geom_bar(data=subset(wordpyramid_data_long, successstate == "Unsuccessful"), stat='identity', aes(y=n*(-1))) + coord_flip() + scale_fill_manual(values=c("royalblue", "firebrick")) + scale_y_continuous(breaks = seq(-100, 100, 20), labels=abs(seq(-100, 100, 20))) + labs(x="Words", y="Document Frequency") + ggtitle('Document Frequency of Common Words by Project Success') + theme_tufte() +theme(legend.position = c(0.85,0.8), legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + guides(fill=guide_legend(title="Successful/\nUnsuccessful Projects"))
sampleproj_wreadability <- cbind(sampleproj, textstat_readability(as.character(sampleproj$blurb),measure=c('Flesch','Flesch.Kincaid','meanSentenceLength','meanWordSyllables')))
ggplot(sampleproj_wreadability, aes(x = Flesch.Kincaid, y = sqrt(pledged))) + geom_point(aes(color=top_category), alpha = 0.5) + geom_smooth(method='lm') + scale_color_manual(values = coul) + xlab('Flesch-Kincaid Grade Level') + ylab('Amount Pledged (Scaled)') + guides(color=guide_legend(title="Kickstarter Category")) + ggtitle("Amount Pledged by Flesch-Kincaid Grade Level ") + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
pos <- read.table(file.choose(), as.is=T)
neg <- read.table(file.choose(), as.is=T)
sentiment <- function(words){
require(quanteda)
tok <- quanteda::tokens(words)
pos.count <- sum(tok[[1]]%in%pos[,1])
neg.count <- sum(tok[[1]]%in%neg[,1])
out <- (pos.count - neg.count)/(pos.count+neg.count)
return(out)}
sampleproj_wreadability_wsentiment <- cbind(sampleproj_wreadability, (foreach(a=as.character(sampleproj$blurb), .combine=rbind) %do% try(sentiment(a))))
names(sampleproj_wreadability_wsentiment)[31] <- "sentiment"
sampleproj_wreadability_wsentiment$sentiment[is.na(sampleproj_wreadability_wsentiment$sentiment)] <- 0
positiveblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment>0)
negativeblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment<=0)
PositiveBlurbs <- as.vector(glue::collapse(as.character(positiveblurbs_uncollapsed$blurb), sep = ";;;"))
NegativeBlurbs <- as.vector(glue::collapse(as.character(negativeblurbs_uncollapsed$blurb), sep = ";;;"))
collapsedblurbs <- as.data.frame(rbind(PositiveBlurbs, NegativeBlurbs))
collapsedblurbs <- tibble::rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs$text <- collapsedblurbs$V1
collapsedblurbs_source <- DataframeSource(collapsedblurbs)
collapsedblurbs_corpus <- VCorpus(collapsedblurbs_source)
collapsedblurbs_clean <- clean_corpus(collapsedblurbs_corpus)
collapsedblurbs_stemmed <- tm_map(collapsedblurbs_clean, stemDocument)
collapsedblurbs_compl <- lapply(collapsedblurbs_stemmed, stemCompletion2, dictionary=collapsedblurbs_clean)
View(sampleproj_wreadability_wsentiment)
sampleproj_wreadability_wsentiment <- cbind(sampleproj_wreadability, (foreach(a=as.character(sampleproj$blurb), .combine=rbind) %do% try(sentiment(a))))
names(sampleproj_wreadability_wsentiment)[33] <- "sentiment"
sampleproj_wreadability_wsentiment$sentiment[is.na(sampleproj_wreadability_wsentiment$sentiment)] <- 0
View(sampleproj_wreadability_wsentiment)
positiveblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment>0)
negativeblurbs_uncollapsed <- subset(sampleproj_wreadability_wsentiment, sentiment<=0)
PositiveBlurbs <- as.vector(glue::collapse(as.character(positiveblurbs_uncollapsed$blurb), sep = ";;;"))
NegativeBlurbs <- as.vector(glue::collapse(as.character(negativeblurbs_uncollapsed$blurb), sep = ";;;"))
collapsedblurbs <- as.data.frame(rbind(PositiveBlurbs, NegativeBlurbs))
collapsedblurbs <- tibble::rownames_to_column(collapsedblurbs, "doc_id")
collapsedblurbs$text <- collapsedblurbs$V1
collapsedblurbs_source <- DataframeSource(collapsedblurbs)
collapsedblurbs_corpus <- VCorpus(collapsedblurbs_source)
collapsedblurbs_clean <- clean_corpus(collapsedblurbs_corpus)
collapsedblurbs_stemmed <- tm_map(collapsedblurbs_clean, stemDocument)
collapsedblurbs_compl <- lapply(collapsedblurbs_stemmed, stemCompletion2, dictionary=collapsedblurbs_clean)
collapsedblurbs_all <- as.VCorpus(collapsedblurbs_compl)
for (i in 1:dim(collapsedblurbs)[1]){
collapsedblurbs_all[[i]]$meta$id <- collapsedblurbs[i,"doc_id"]}
collapsedblurbs_tdm <- TermDocumentMatrix(collapsedblurbs_all)
collapsedblurbs_m <- as.matrix(collapsedblurbs_tdm)
par(mfrow=c(1,1))
set.seed(2103)
comparison.cloud(collapsedblurbs_m, colors = c("navyblue", "indianred"), scale=c(0.1,1.7), title.size= 1, max.words = 100, family="Garamond")
comparison.cloud(collapsedblurbs_m, colors = c("navyblue", "indianred"), scale=c(0.1,1.7), title.size= 1, max.words = 100, family="Garamond")
par(mfrow=c(1,1))
set.seed(2103)
comparison.cloud(collapsedblurbs_m, colors = c("navyblue", "indianred"), scale=c(0.1,1.6), title.size= 1, max.words = 100, family="Garamond")
par(mfrow=c(1,1))
set.seed(2103)
comparison.cloud(collapsedblurbs_m, colors = c("navyblue", "indianred"), scale=c(0.1,1.6), title.size= 1, max.words = 100, family="Garamond")
dictionary <- get_sentiments("nrc") %>% mutate(id=1:n()) %>% spread(sentiment, word)
dictionary <- apply(dictionary, 2, as.list)
dictionary <- lapply(dictionary, function(x) x[!is.na(x)])
dictionary <- dictionary(dictionary)
sampleproj_all_quanteda <- corpus(sampleproj_all)
sampleproj_all_emotion_dfm <- dfm(sampleproj_all_quanteda, dictionary=dictionary)
sampleproj_all_emotion_df <- as.data.frame(as.matrix(sampleproj_all_emotion_dfm))
View(sampleproj_all_emotion_df)
sampleproj_all_emotion_df <- tibble::rownames_to_column(sampleproj_all_emotion_df, "id")
sampleproj_all_emotion_df$id <- NULL
sampleproj_all_emotion_df <- tibble::rownames_to_column(sampleproj_all_emotion_df, "id")
View(sampleproj_all_emotion_df)
sampleproj_all_emotion_df_wmeta <- merge(sampleproj_all_emotion_df, sampleproj_wreadability_wsentiment, by.x="docs", by.y="id", all.x=T)
sampleproj_all_emotion_df_wmeta <- merge(sampleproj_all_emotion_df, sampleproj_wreadability_wsentiment, by="id", all.x=T)
View(sampleproj_all_emotion_df_wmeta)
sampleproj_wreadability_wsentiment$sentimentcat <- ifelse(sampleproj_wreadability_wsentiment$sentiment>0, "Positive", ifelse(sampleproj_wreadability_wsentiment$sentiment<0, "Negative", ifelse(sampleproj_wreadability_wsentiment$sentiment==0, "Neutral", NA)))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sqrt(pledged), x = sentimentcat)) + geom_point(aes(color=top_category), alpha = 0.5) + scale_color_manual(values = coul) + ylab('Sentiment Category') + xlab('Amount Pledged (Scaled)') + guides(color=guide_legend(title="Kickstarter Category")) + ggtitle("Amount Pledged by Sentiment Score ") + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
View(sampleproj_wreadability_wsentiment)
ggplot(sampleproj_wreadability_wsentiment, aes(x = sqrt(pledged), y = sentimentcat)) + geom_point(aes(color=top_category), alpha = 0.5) + scale_color_manual(values = coul) + ylab('Sentiment Category') + xlab('Amount Pledged (Scaled)') + guides(color=guide_legend(title="Kickstarter Category")) + ggtitle("Amount Pledged by Sentiment Score ") + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sqrt(pledged), y = sentimentcat)) + geom_point(color="navyblue"), alpha = 0.5) + geom_boxplot() + ylab('Sentiment Category') + xlab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sqrt(pledged), y = sentimentcat)) + geom_point(color="navyblue", alpha = 0.5) + geom_boxplot() + ylab('Sentiment Category') + xlab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sqrt(pledged), y = sentimentcat)) + geom_boxplot() + ylab('Sentiment Category') + xlab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sqrt(pledged), y = sentimentcat)) + geom_boxplot() + ylab('Sentiment Category') + xlab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_boxplot() + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() theme_tufte() +ttheme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_boxplot() + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() + theme_tufte() +ttheme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_boxplot() + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_boxplot() + geom_jitter + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_boxplot() + geom_jitter() + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_boxplot(color="navyblue", alpha=0.5) + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_violin(color="navyblue", alpha=0.5, scale=count) + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_violin(color="navyblue", alpha=0.5) + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_violin(color="navyblue", alpha=0.5) + geom_boxplot(fill="white", width=0.2, alpha=0.5) + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_wreadability_wsentiment, aes(x = sentimentcat, y = sqrt(pledged))) + geom_point(color="navyblue", alpha = 0.5) + geom_boxplot(fill="white", width=0.2, alpha=0.5) + xlab('Sentiment Category') + ylab('Amount Pledged (Scaled)') + ggtitle("Amount Pledged by Sentiment Score ") + coord_flip() + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
sampleproj_all_emotion_df_long <- gather(sampleproj_all_emotion_df, key="emotion", value="n", -id)
sampleproj_all_emotion_df_wmeta <- merge(sampleproj_all_emotion_df_long, sampleproj_wreadability_wsentiment, by="id", all.x=T)
View(sampleproj_all_emotion_df_long)
View(sampleproj_all_emotion_df_wmeta)
ggplot(sampleproj_all_emotion_df_wmeta, aes(x = n, y = sqrt(pledged))) + geom_point(aes(color=emotion), alpha = 0.5) + geom_smooth(method='lm') + scale_color_manual(values = emotion) + facet_wrap(~ emotion, ncol=5) + xlab('Emotion Score') + ylab('Amount Pledged (Scaled)') + guides(color=NULL)) + ggtitle("Amount Pledged by Emotion Score") + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_all_emotion_df_wmeta, aes(x = n, y = sqrt(pledged))) + geom_point(aes(color=emotion), alpha = 0.5) + geom_smooth(method='lm') + scale_color_manual(values = emotion) + facet_wrap(~ emotion, ncol=5) + xlab('Emotion Score') + ylab('Amount Pledged (Scaled)') + guides(color=NULL) + ggtitle("Amount Pledged by Emotion Score") + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
View(sampleproj_all_emotion_df_wmeta)
ggplot(sampleproj_all_emotion_df_wmeta, aes(x = n, y = sqrt(pledged))) + geom_point(aes(color=emotion), alpha = 0.5) + geom_smooth(method='lm') + scale_color_brewer("Spectral") + facet_wrap(~ emotion, ncol=5) + xlab('Emotion Score') + ylab('Amount Pledged (Scaled)') + guides(color=NULL) + ggtitle("Amount Pledged by Emotion Score") + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_all_emotion_df_wmeta, aes(x = n, y = sqrt(pledged))) + geom_point(aes(color=emotion), alpha = 0.5) + geom_smooth(method='lm') + scale_color_brewer(palette = "Spectral") + facet_wrap(~ emotion, ncol=5) + xlab('Emotion Score') + ylab('Amount Pledged (Scaled)') + guides(color=NULL) + ggtitle("Amount Pledged by Emotion Score") + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
ggplot(sampleproj_all_emotion_df_wmeta, aes(x = n, y = sqrt(pledged))) + geom_point(aes(color=emotion), alpha = 0.5) + geom_smooth(method='lm') + scale_color_brewer(palette = "Spectral") + facet_wrap(~ emotion, ncol=5) + xlab('Emotion Score') + ylab('Amount Pledged (Scaled)') + guides(color=FALSE) + ggtitle("Amount Pledged by Emotion Score") + theme_tufte() +theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
require(magrittr)
require(dplyr)
require(ggplot2)
require(ggrepel)
require(ggthemes)
require(extrafont)
require(RColorBrewer)
require(rgdal)
require(leaflet)
require(tm)
require(tidytext)
require(wordcloud)
require(tidyr)
require(quanteda)
require(foreach)
require(glue)
loadfonts()
setwd("~/Documents/GitHub/FONG_YewLoong/HW03")
#Load and clean kickstarter file
kickstarter <- read.csv('kickstarter.csv')
```{r, dpi=300, fig.align='center',warning=FALSE,message=FALSE,error=FALSE}
require(magrittr)
require(dplyr)
require(ggplot2)
require(ggrepel)
require(ggthemes)
require(extrafont)
require(RColorBrewer)
require(rgdal)
require(leaflet)
require(tm)
require(tidytext)
require(wordcloud)
require(tidyr)
require(quanteda)
require(foreach)
require(glue)
loadfonts()
setwd("~/Documents/GitHub/FONG_YewLoong/HW03")
#Load and clean kickstarter file
kickstarter <- read.csv('kkickstarter_projects.csv')
require(magrittr)
require(dplyr)
require(ggplot2)
require(ggrepel)
require(ggthemes)
require(extrafont)
require(RColorBrewer)
require(rgdal)
require(leaflet)
require(tm)
require(tidytext)
require(wordcloud)
require(tidyr)
require(quanteda)
require(foreach)
require(glue)
loadfonts()
setwd("~/Documents/GitHub/FONG_YewLoong/HW03")
#Load and clean kickstarter file
kickstarter <- read.csv('kickstarter_projects.csv')
kickstarter$uniqid <- paste(kickstarter$blurb, kickstarter$id, sep=" ")
kickstarter <- kickstarter[!duplicated(kickstarter$uniqid),]
#Set up data to create pyramid plot of successful/unsuccessful projects by category
kickstarter$state2 <- ifelse(kickstarter$state=="successful", "Successful", "Unsuccessful")
state <- kickstarter %>% group_by(top_category, state2) %>% summarize(nostate=length(state2))
#Plot pyramid plot
ggplot(state , aes(x = reorder(top_category, -nostate), y = nostate, fill = state2)) + geom_bar(data=subset(state, state2 == "Successful"), stat='identity') +  geom_bar(data=subset(state, state2 == "Unsuccessful"), stat='identity', aes(y=nostate*(-1))) + scale_y_continuous(breaks = seq(-10000, 150000, 5000), labels=abs(seq(-10000, 150000, 5000))) + coord_flip() + scale_fill_manual(values=c("royalblue", "firebrick"))  + labs(x="Kickstarter Categories", y="No Successful/Unsuccessful") + ggtitle('No Successful/Unsuccessful Per Category') + theme_tufte() +theme(legend.position = c(0.85,0.7), legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + guides(fill=guide_legend(title="Successful/Unsuccessful"))
View(state)
View(kickstarter)
#Create achievement ratio variable
kickstarter$achievementratio <- kickstarter$pledged/kickstarter$goal
#Calculate mean amount pledged and mean achievement ratios for each category
meanpledged<- kickstarter %>% group_by(top_category) %>% summarize(meanpledged=mean(pledged))
meanachievementratio<- kickstarter %>% group_by(top_category) %>% summarize(meanachievementratio=mean(achievementratio, na.rm=T))
merge <- merge(meanpledged, meanachievementratio, by="top_category")
#Plot bubble chart of mean amount pledged and mean achievement ratio for each category
coul <- brewer.pal(11, "Spectral")
coul = colorRampPalette(coul)(15)
ggplot(data=merge, aes(x=meanpledged, y=meanachievementratio, label=top_category)) + geom_point(aes(color=top_category), size = 4, alpha = 0.5) + geom_text_repel(aes(label=top_category), size=2.5, family="Garamond") + labs(x="Mean Amount Pledged ($)", y="Mean Achievement Ratio") + ggtitle('Mean Amount Pledged and Mean Achievement Ratio per Kickstarter Category') + theme_tufte() + guides(color=FALSE) + scale_color_manual(values = coul) + theme(plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
#Loading in state data
population <- read.csv('population2017.csv')
#Loading in state data
population <- read.csv('population2017')
#Loading in state data
population <- read.csv('population2017.csv')
setwd("~/Documents/GitHub/FONG_YewLoong/HW03")
#Loading in state data
population <- read.csv('population2017.csv')
setwd("~/Documents/GitHub/FONG_YewLoong/HW03")
#Loading in state data
population <- read.csv('population2017.csv')
setwd("~/Documents/GitHub/FONG_YewLoong/HW03/")
#Loading in state data
population <- read.csv('population2017.csv')
abbreviations <- read.csv('states.csv')
