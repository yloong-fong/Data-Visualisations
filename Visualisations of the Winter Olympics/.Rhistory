knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggthemes)
require(magrittr)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(extrafont)
require(ggrepel)
require(ggpubr)
require(rvest)
require(stringr)
require(grid)
require(gridExtra)
require(plotly)
require(DT)
require(shiny)
loadfonts()
setwd("~/Desktop")
winter <- read.csv('winter.csv')
countrystats <- read.csv('dictionary.csv')
#Dealing with Defunct Countries
winter$CountryRename <- ifelse(winter$Country=='URS', 'RUS', as.character(winter$Country))
winter$CountryRename <- ifelse(winter$Country=='EUN', 'RUS', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='GDR', 'GER', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='FRG', 'GER', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='EUA', 'GER', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='TCH', 'CZE', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='YUG', 'SCG', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='ROU', 'ROM', winter$CountryRename)
#Determining Host Country (For later question)
wiki_hosts <- read_html("https://en.wikipedia.org/wiki/Winter_Olympic_Games")
hosts <- html_table(html_nodes(wiki_hosts, "table")[[5]], fill=TRUE)
hosts <- hosts[-1,1:3]
hosts$City <- str_split_fixed(hosts$Host, n=2, ",")[,1]
hosts$Hostcountry <- str_split_fixed(hosts$Host, n=2, ", ")[,2]
hosts <- hosts[-c(5,6,25,26),]
hosts <- hosts[c("Year", "City", "Hostcountry")]
city.compare <- cbind(hosts$City, unique(paste(winter$Year, winter$City, sep=" ")))
winter$City <- ifelse(winter$City=='St.Moritz', 'St. Moritz', as.character(winter$City))
winter$City <- ifelse(winter$City=='Garmisch Partenkirchen', 'Garmisch-Partenkirchen', as.character(winter$City))
winter <- merge(winter, hosts, by=c("Year", "City"))
#Calculating Unique Medals and Creating Long Data by Medal Type (To ensure team sports only count once)
winter$uniquemedals <- paste(winter$Year, winter$Discipline, winter$Event, winter$Medal, winter$Gender, sep=" ")
country.allmedals.alltime <- winter %>% group_by(CountryRename, Medal) %>% summarize(total = length(unique(uniquemedals))) %>% ungroup()
colnames(country.allmedals.alltime)[colnames(country.allmedals.alltime)=="CountryRename"] <- "Code"
country.allmedals.alltime.withstats <- merge(country.allmedals.alltime, countrystats)
#Reshaping Long Data by Medal Type into Wide Data
country.allmedals.alltime.wide <- spread(country.allmedals.alltime, Medal, total)
country.allmedals.alltime.wide$Gold <- ifelse(is.na(country.allmedals.alltime.wide$Gold), 0, country.allmedals.alltime.wide$Gold)
country.allmedals.alltime.wide$Silver <- ifelse(is.na(country.allmedals.alltime.wide$Silver), 0, country.allmedals.alltime.wide$Silver)
country.allmedals.alltime.wide$Bronze <- ifelse(is.na(country.allmedals.alltime.wide$Bronze), 0, country.allmedals.alltime.wide$Bronze)
country.allmedals.alltime.wide$allmedals <- country.allmedals.alltime.wide$Gold + country.allmedals.alltime.wide$Silver + country.allmedals.alltime.wide$Bronze
colnames(country.allmedals.alltime.wide)[colnames(country.allmedals.alltime.wide)=="CountryRename"] <- "Code"
country.allmedals.alltime.wide.withstats <- merge(country.allmedals.alltime.wide, countrystats)
#Calculating Number of Games Each Country Medaled In
country.allmedals.alltime.yearswon <- winter %>% group_by(CountryRename) %>% summarize(yearswon = length(unique(Year))) %>% ungroup()
colnames(country.allmedals.alltime.yearswon)[colnames(country.allmedals.alltime.yearswon)=="CountryRename"] <- "Code"
country.allmedals.alltime.wide.withstats <- merge(country.allmedals.alltime.wide.withstats, country.allmedals.alltime.yearswon)
#Creating Plot of Number of Years Country Medaled by Country's Population
coul <- brewer.pal(11, "Spectral")
coul = colorRampPalette(coul)(40)
plot.country.allmedals.alltime.bypopulation <- ggplot(country.allmedals.alltime.wide.withstats, aes(x = log(Population), y = yearswon, label = Country)) + geom_point(aes(color=Country, size=allmedals), alpha = 0.5) + scale_size(range = c(1, 10)) + geom_text_repel(aes(label=Country), size=2.5, family="Garamond") + guides(color=FALSE) + scale_color_manual(values = coul) + xlab('Population (Log)') + ylab('Years With At Least One Medal Won') + guides(size=guide_legend(title="Total Medals")) + ggtitle("Country's Winter Olympic Success By Population") + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
plot.country.allmedals.alltime.bypopulation
#Filtering Top 10 Countries in Wide Data
top10country.allmedals.alltime.wide.withstats <- country.allmedals.alltime.wide.withstats %>% arrange(desc(allmedals)) %>% mutate(rank=row_number()) %>% filter(rank<=10)  %>% arrange(rank)
#Filtering Top 10 Countries in Long Data
top10country.allmedals.alltime.withstats <- country.allmedals.alltime.withstats %>% filter(Code %in% top10country.allmedals.alltime.wide.withstats$Code)
#Ordering Medal Types
top10country.allmedals.alltime.withstats$Medal <- as.factor(top10country.allmedals.alltime.withstats$Medal)
top10country.allmedals.alltime.withstats$Medal = factor(top10country.allmedals.alltime.withstats$Medal,levels(top10country.allmedals.alltime.withstats$Medal)[c(1,3,2)])
#Creating Plot of Medal Count By Country
plot.top10country.allmedals.alltime <- ggplot(top10country.allmedals.alltime.withstats, aes(y=total, x=reorder(Country, -total), fill = Medal)) + xlab('Country') + ylab('Medal Count') + ggtitle('Medal Count By Country') + theme_tufte() +theme(legend.position = c(0.9,0.9), legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + geom_bar(stat='identity') + scale_fill_manual(values=c("sienna", "slategray", "gold3"))
plot.top10country.allmedals.alltime
#Creating a Dataframe Matching Every Country to Every Olympic Date
winteryears<- c(1924, 1928, 1932, 1936, 1948, 1952, 1956, 1960,1964,1968,1972,1976,1980,1984,1988,1992,1994,1998,2002,2006,2010,2014)
countries <- country.allmedals.alltime.wide.withstats[c("Country")]
countries.winteryears <- merge(countries, winteryears)
colnames(countries.winteryears)[colnames(countries.winteryears)=="y"] <- "Year"
#Creating Long Data by Year
country.allmedals.byyear <-  winter %>% group_by(CountryRename, Year, Hostcountry) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup()
colnames(country.allmedals.byyear)[colnames(country.allmedals.byyear)=="CountryRename"] <- "Code"
country.allmedals.byyear.withstats <- merge(country.allmedals.byyear, countrystats)
#Recoding Years with No Medal Data to zero
country.allmedals.byyear.withstats <- full_join(countries.winteryears, country.allmedals.byyear.withstats, by=c("Country", "Year")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
#Filtering to Top 10 countries
top10country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats %>% filter(Country %in% top10country.allmedals.alltime.wide.withstats$Country)
#Ordering Countries by Rank
top10ranks <- top10country.allmedals.alltime.wide.withstats[c("Code", "rank")]
top10country.allmedals.byyear.withstats <- full_join(top10country.allmedals.byyear.withstats, top10ranks)
top10country.allmedals.byyear.withstats$Country <- as.factor(top10country.allmedals.byyear.withstats$Country)
top10country.allmedals.byyear.withstats$Country = factor(top10country.allmedals.byyear.withstats$Country, levels=unique(top10country.allmedals.byyear.withstats$Country[order(-top10country.allmedals.byyear.withstats$rank)]), ordered=TRUE)
#Creating Plot of Total Medals Over Time By Country
plot.top10country.allmedals.byyear <- ggplot(top10country.allmedals.byyear.withstats, aes(x=Year, y=allmedals, fill=Country)) + geom_area() + xlab('Year') + ylab('Total Medals') + ggtitle('Total Medals Over Time By Country') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_fill_brewer(palette="Spectral")
plot.top10country.allmedals.byyear
#Ranking Top 10 Countries For Each Gender
top10countries.allmedals.alltime.eachgender <- winter %>% group_by(CountryRename, Gender) %>% summarize(allmedals = length(unique(uniquemedals))) %>% arrange(desc(allmedals)) %>% group_by(Gender) %>% mutate(rank=row_number()) %>% filter(rank<=10) %>% arrange(Gender, rank)
top10countries.allmedals.alltime.women <-top10countries.allmedals.alltime.eachgender %>% filter(Gender=="Women")
colnames(top10countries.allmedals.alltime.women)[colnames(top10countries.allmedals.alltime.women)=="CountryRename"] <- "Code"
top10countries.allmedals.alltime.women <- merge(top10countries.allmedals.alltime.women, countrystats)
top10countries.allmedals.alltime.men <-top10countries.allmedals.alltime.eachgender %>% filter(Gender=="Men")
colnames(top10countries.allmedals.alltime.men)[colnames(top10countries.allmedals.alltime.men)=="CountryRename"] <- "Code"
top10countries.allmedals.alltime.men <- merge(top10countries.allmedals.alltime.men, countrystats)
#Filter Top Ten Countries By Year and Gender
country.allmedals.byyear.bygender <-  winter %>% group_by(CountryRename, Year, Hostcountry, Gender) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup()
colnames(country.allmedals.byyear.bygender)[colnames(country.allmedals.byyear.bygender)=="CountryRename"] <- "Code"
country.allmedals.byyear.bygender.withstats <- merge(country.allmedals.byyear.bygender, countrystats)
top10womencountry.allmedals.byyear.withstats <- country.allmedals.byyear.bygender.withstats %>% filter(Gender == 'Women')  %>% filter(Code %in% top10countries.allmedals.alltime.women$Code)
top10mencountry.allmedals.byyear.withstats <- country.allmedals.byyear.bygender.withstats %>% filter(Gender == 'Men') %>% filter(Code %in% top10countries.allmedals.alltime.men$Code)
#Determining Years where Country had 0 medals for Particular Genders
top10womencountries <- top10countries.allmedals.alltime.women[c("Country")]
top10womencountries.winteryears <- merge(top10womencountries, winteryears)
colnames(top10womencountries.winteryears)[colnames(top10womencountries.winteryears)=="y"] <- "Year"
top10womencountry.allmedals.byyear.withstats <- full_join(top10womencountries.winteryears, top10womencountry.allmedals.byyear.withstats, by=c("Country", "Year")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
top10mencountries <- top10countries.allmedals.alltime.men[c("Country")]
top10mencountries.winteryears <- merge(top10mencountries, winteryears)
colnames(top10mencountries.winteryears)[colnames(top10mencountries.winteryears)=="y"] <- "Year"
top10mencountry.allmedals.byyear.withstats <- full_join(top10mencountries.winteryears, top10mencountry.allmedals.byyear.withstats, by=c("Country", "Year")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
#Ordering Countries by Rank
top10womenranks <- top10countries.allmedals.alltime.women [c("Code", "rank")]
top10womencountry.allmedals.byyear.withstats <- full_join(top10womencountry.allmedals.byyear.withstats, top10womenranks)
top10womencountry.allmedals.byyear.withstats$Country <- as.factor(top10womencountry.allmedals.byyear.withstats$Country)
top10womencountry.allmedals.byyear.withstats$Country = factor(top10womencountry.allmedals.byyear.withstats$Country, levels=unique(top10womencountry.allmedals.byyear.withstats$Country[order(-top10womencountry.allmedals.byyear.withstats$rank)]), ordered=TRUE)
top10menranks <- top10countries.allmedals.alltime.men [c("Code", "rank")]
top10mencountry.allmedals.byyear.withstats <- full_join(top10mencountry.allmedals.byyear.withstats, top10menranks)
top10mencountry.allmedals.byyear.withstats$Country <- as.factor(top10mencountry.allmedals.byyear.withstats$Country)
top10mencountry.allmedals.byyear.withstats$Country = factor(top10mencountry.allmedals.byyear.withstats$Country, levels=unique(top10mencountry.allmedals.byyear.withstats$Country[order(-top10mencountry.allmedals.byyear.withstats$rank)]), ordered=TRUE)
#Creating Plot of Total Medals Over Time By Country and Gender
plot.top10womencountry.allmedals.byyear <- ggplot(top10womencountry.allmedals.byyear.withstats, aes(x=Year, y=allmedals, fill=Country)) + geom_area() + xlab('Year') + ylab('Total Medals') + ggtitle('Total Medals Over Time By Country (Women)') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_fill_brewer(palette="PiYG") + guides(fill=guide_legend(ncol=2))
plot.top10mencountry.allmedals.byyear <- ggplot(top10mencountry.allmedals.byyear.withstats, aes(x=Year, y=allmedals, fill=Country)) + geom_area() + xlab('Year') + ylab('Total Medals') + ggtitle('Total Medals Over Time By Country (Men)') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_fill_brewer(palette="RdBu") + guides(fill=guide_legend(ncol=2))
plot.gendertrend <- ggarrange(plot.top10womencountry.allmedals.byyear, plot.top10mencountry.allmedals.byyear, ncol = 1, nrow = 2, align='hv')
plot.gendertrend
#Calculate Score
country.allmedals.alltime.wide.withstats$score <- 3*country.allmedals.alltime.wide.withstats$Gold + 2*country.allmedals.alltime.wide.withstats$Silver + country.allmedals.alltime.wide.withstats$Bronze
#Adjust Score by Population and GDP
country.allmedals.alltime.wide.withstats$scorepopadj <- country.allmedals.alltime.wide.withstats$score/country.allmedals.alltime.wide.withstats$Population
country.allmedals.alltime.wide.withstats$scoregdpadj <- country.allmedals.alltime.wide.withstats$score/country.allmedals.alltime.wide.withstats$GDP.per.Capita
#Standardise Scores
country.allmedals.alltime.wide.withstats$"Standardized Score" <- scale(country.allmedals.alltime.wide.withstats$score)
country.allmedals.alltime.wide.withstats$"Population Adjusted Standardized Score" <- scale(country.allmedals.alltime.wide.withstats$scorepopadj)
country.allmedals.alltime.wide.withstats$"GDP per Capita Adjusted Standardized Score" <- scale(country.allmedals.alltime.wide.withstats$scoregdpadj)
country.allmedals.alltime.wide.withstats.scorepanel <- gather(country.allmedals.alltime.wide.withstats, key = scoretype, value = value, "Standardized Score", "Population Adjusted Standardized Score", "GDP per Capita Adjusted Standardized Score")
#Creating Plot of Standardized Scores by Country
plot.countryscores <- ggplot(country.allmedals.alltime.wide.withstats.scorepanel, aes(x=value, y=reorder(Country, score), group = 'scoretype', color = 'scoretype')) + geom_point(aes(color=scoretype), alpha = 0.8) + xlab('Score') + ylab('Country') + ggtitle('Standardized Scores By Country') + theme_tufte() +theme(panel.grid.major.y = element_line(colour="gray90"), legend.position = c(0.8, 0.5), legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_color_manual(values=c("tan2", "darkolivegreen2", "royalblue2")) + guides(color=guide_legend(title="Score Type"))
plot.countryscores
#Determining if a Country is a Host Country
country.allmedals.byyear.withstats$HostStatus <- ifelse(country.allmedals.byyear.withstats$Country==country.allmedals.byyear.withstats$Hostcountry, 'Host', NA)
#Calculating Percentage of Medals a Country Won in Each Year
totalyearmedals <- country.allmedals.byyear.withstats %>% group_by(Year) %>% summarize(totalyearmedals = sum(allmedals))
country.allmedals.byyear.withstats <- merge(country.allmedals.byyear.withstats, totalyearmedals)
country.allmedals.byyear.withstats$PctMedals <- (country.allmedals.byyear.withstats$allmedals/country.allmedals.byyear.withstats$totalyearmedals)*100
#Create Plot of Percentage of Medals Won Over Time
plot.hostcountryadvantage <- ggplot(country.allmedals.byyear.withstats, aes(x=as.character(Year), y=Country, fill = PctMedals)) + geom_tile() + labs(x='Year', y='Country', fill="Pct Medals") + ggtitle('Percentage Of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue") + geom_text(aes(label=HostStatus), size=3, family="Garamond", fontface='bold')
plot.hostcountryadvantage
#Subsetting Long Data by Scandinavian Countries, Taking into Account Year and Sport
scandinavia = subset(winter, CountryRename=='SWE'|CountryRename=='NOR'|CountryRename=='FIN')
scandinavia.allmedals.byevent.byyear <-  scandinavia %>% group_by(CountryRename, Year, Hostcountry, Sport) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup()
colnames(scandinavia.allmedals.byevent.byyear)[colnames(scandinavia.allmedals.byevent.byyear)=="CountryRename"] <- "Code"
scandinavia.allmedals.byevent.byyear.withstats <- merge(scandinavia.allmedals.byevent.byyear, countrystats)
#Determining Years where Country had 0 medals for Particular Sports
scandinavia.countries.winteryears <- subset(countries.winteryears, Country=='Sweden'|Country=='Norway'|Country=='Finland')
sport <- unique(winter$Sport)
scandinavia.countries.winteryears <- merge(scandinavia.countries.winteryears, sport)
colnames(scandinavia.countries.winteryears)[colnames(scandinavia.countries.winteryears)=="y"] <- "Sport"
scandinavia.allmedals.byevent.byyear.withstats <- full_join(scandinavia.countries.winteryears, scandinavia.allmedals.byevent.byyear.withstats, by=c("Country", "Year", "Sport")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
#Create Plot of Total Medals Over Time By Sport
plot.scandinavia.byevent <- ggplot(scandinavia.allmedals.byevent.byyear.withstats, aes(x=Year, y=allmedals, color=Sport)) + geom_line() + facet_grid(Country ~.) + xlab('Year') + ylab('Total Medals') + ggtitle('Total Medals Over Time By Sport (Scandinavia)') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_color_brewer(palette="Set2") + guides(color=guide_legend(title="Sport"))
plot.scandinavia.byevent
#Subsetting Long Data by Scandinavian Countries, Taking into Account Year and Sport and Gender
scandinavia.allmedals.byevent.bygender.byyear <-  scandinavia %>% group_by(CountryRename, Year, Hostcountry, Gender, Sport) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup()
colnames(scandinavia.allmedals.byevent.bygender.byyear)[colnames(scandinavia.allmedals.byevent.bygender.byyear)=="CountryRename"] <- "Code"
scandinavia.allmedals.byevent.bygender.byyear.withstats <- merge(scandinavia.allmedals.byevent.bygender.byyear, countrystats)
women.scandinavia.allmedals.byevent.byyear.withstats  <- scandinavia.allmedals.byevent.bygender.byyear.withstats  %>% filter(Gender=="Women")
men.scandinavia.allmedals.byevent.byyear.withstats  <- scandinavia.allmedals.byevent.bygender.byyear.withstats  %>% filter(Gender=="Men")
#Determining Years where Country had 0 medals for Particular Sports
women.scandinavia.allmedals.byevent.byyear.withstats <- full_join(scandinavia.countries.winteryears, women.scandinavia.allmedals.byevent.byyear.withstats, by=c("Country", "Year", "Sport")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
men.scandinavia.allmedals.byevent.byyear.withstats <- full_join(scandinavia.countries.winteryears, men.scandinavia.allmedals.byevent.byyear.withstats, by=c("Country", "Year", "Sport")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
#Create Plot of Total Medals Over Time By Sport for Men and Women
plot.men.scandinavia.byevent <- ggplot(men.scandinavia.allmedals.byevent.byyear.withstats, aes(x=Year, y=allmedals, group=Sport, color=Sport)) + geom_line() + facet_grid(Country ~.) + xlab('Year') + ylab('Total Medals') + ggtitle('Men') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, size=14), text=element_text(family="Garamond")) + scale_color_brewer(palette="Set2") + guides(color=guide_legend(title="Sport"))
plot.women.scandinavia.byevent <- ggplot(women.scandinavia.allmedals.byevent.byyear.withstats, aes(x=Year, y=allmedals, group=Sport, color=Sport)) + geom_line() + facet_grid(Country ~.) + xlab('Year') + ylab('Total Medals') + ggtitle('Women') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, size=14), text=element_text(family="Garamond")) + scale_color_brewer(palette="Set2") + guides(color=guide_legend(title="Sport"))
plot.scandinavia.gender.trend <- ggarrange(plot.women.scandinavia.byevent, plot.men.scandinavia.byevent , ncol = 2, nrow = 1, align='hv', common.legend = T, legend = "bottom")
plot.scandinavia.gender.trend <- grid.arrange(plot.scandinavia.gender.trend, top =textGrob("Total Medals Over Time By Sport (Scandinavia)", gp=gpar(fontsize=14,fontfamily="Garamond",fontface="bold")))
#Creating Long Data by Athlete
athletes.allmedals <- winter %>% group_by(CountryRename, Gender, Sport, Athlete) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup() %>% arrange(desc(allmedals))
colnames(athletes.allmedals)[colnames(athletes.allmedals)=="CountryRename"] <- "Code"
athletes.allmedals.withstats <- merge(athletes.allmedals, countrystats)
#Ranking Athletes and Filtering to Top 10
athletes.allmedals.withstats$rank <- rank(-athletes.allmedals.withstats$allmedals, na.last = TRUE, ties.method = "min")
top10athletes.allmedals.withstats <- subset(athletes.allmedals.withstats, athletes.allmedals.withstats$rank <= 10)
#Cleaning names of Athletes
top10athletes.allmedals.withstats$Athlete <- ifelse(top10athletes.allmedals.withstats$allmedals==12, "DAEHLIE, Bjorn", as.character(top10athletes.allmedals.withstats$Athlete))
#Distinguishing Women Athletes
top10athletes.allmedals.withstats$Italic <- ifelse(top10athletes.allmedals.withstats$Gender=='Women', "italic", "plain")
#Create Plot of Total Medals Over Time By Athlete
top10athletes.allmedals.withstats <- top10athletes.allmedals.withstats %>% arrange(desc(allmedals), Athlete)
plot.topathletes <- ggplot(top10athletes.allmedals.withstats, aes(x=allmedals, y=reorder(Athlete, -allmedals))) + geom_point(aes(color=Country, shape=Sport)) + xlab('Total Medals') + ylab('Athlete') + ggtitle('Total Medals By Athlete') + theme_tufte() +theme(axis.text.y = element_text(face = top10athletes.allmedals.withstats$Italic), panel.grid.major.y = element_line(colour="gray90"), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_color_brewer(palette = "Dark2") + guides(color=guide_legend(title="Country")) + guides(shape=guide_legend(title="Sport"))
plot.topathletes
forplotly.country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats
forplotly.country.allmedals.byyear.withstats$Year <- as.character(forplotly.country.allmedals.byyear.withstats$Year)
forplotly.hostcountryadvantage <- ggplot(forplotly.country.allmedals.byyear.withstats, aes(x=Year, y=Country, fill = PctMedals)) + geom_tile() + labs(x='Year', y='Country', fill="Pct Medals", label="allmedals") + ggtitle('Percentage of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue") + geom_text(aes(label=HostStatus), size=3, family="Garamond", fontface='bold')
div(ggplotly(forplotly.hostcountryadvantage), align = 'center')
forplotly.scandinavia.allmedals.byevent.byyear.withstats <- scandinavia.allmedals.byevent.byyear.withstats
colnames(forplotly.scandinavia.allmedals.byevent.byyear.withstats)[colnames(forplotly.scandinavia.allmedals.byevent.byyear.withstats)=="allmedals"] <- "TotalMedals"
forplotly.scandinavia.byevent <- ggplot(forplotly.scandinavia.allmedals.byevent.byyear.withstats, aes(x=Year, y=TotalMedals, color=Sport)) + geom_line() + facet_grid(Country ~.) + labs(x='Year', y='Total Medals', color='Sport') + ggtitle('Total Medals Over Time By Sport (Scandinavia)') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_color_brewer(palette="Set2")
div(ggplotly(forplotly.scandinavia.byevent, tooltip = c("Year", "Sport", "TotalMedals")), align = 'center')
fordatatable.country.allmedals.alltime.wide.withstats <- country.allmedals.alltime.wide.withstats
fordatatable.country.allmedals.alltime.wide.withstats <- fordatatable.country.allmedals.alltime.wide.withstats[,c(6,1,5,2,3,4,10,13,14,15,7,8,9)]
colnames(fordatatable.country.allmedals.alltime.wide.withstats)[colnames(fordatatable.country.allmedals.alltime.wide.withstats)=="allmedals"] <- "Total Medals"
colnames(fordatatable.country.allmedals.alltime.wide.withstats)[colnames(fordatatable.country.allmedals.alltime.wide.withstats)=="score"] <- "Olympic Score"
colnames(fordatatable.country.allmedals.alltime.wide.withstats)[colnames(fordatatable.country.allmedals.alltime.wide.withstats)=="GDP.per.Capita"] <- "GDP Per Capita"
colnames(fordatatable.country.allmedals.alltime.wide.withstats)[colnames(fordatatable.country.allmedals.alltime.wide.withstats)=="yearswon"] <- "Years Medaled"
fordatatable.country.allmedals.alltime.wide.withstats[,c('Standardized Score', 'Population Adjusted Standardized Score', 'GDP per Capita Adjusted Standardized Score', 'GDP Per Capita')]=round(fordatatable.country.allmedals.alltime.wide.withstats[,c('Standardized Score', 'Population Adjusted Standardized Score', 'GDP per Capita Adjusted Standardized Score', 'GDP Per Capita')],2)
datatable(fordatatable.country.allmedals.alltime.wide.withstats, options = list(autoWidth = TRUE)) %>% formatStyle('Country',  color = 'white', backgroundColor = 'slategray', fontWeight = 'bold')
forplotly.country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats
forplotly.country.allmedals.byyear.withstats$Year <- as.character(forplotly.country.allmedals.byyear.withstats$Year)
forplotly.hostcountryadvantage <- ggplot(forplotly.country.allmedals.byyear.withstats, aes(x=Year, y=Country, fill = PctMedals)) + geom_tile() + labs(x='Year', y='Country', fill="Pct Medals", label="allmedals") + ggtitle('Percentage of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue")
div(ggplotly(forplotly.hostcountryadvantage), align = 'center')
View(forplotly.country.allmedals.byyear.withstats)
View(forplotly.country.allmedals.byyear.withstats)
forplotly.country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats
forplotly.country.allmedals.byyear.withstats$Year <- as.character(forplotly.country.allmedals.byyear.withstats$Year)
forplotly.hostcountryadvantage <- ggplot(forplotly.country.allmedals.byyear.withstats, aes(x=Year, y=Country, fill = PctMedals)) + geom_tile() + labs(x='Year', y='Country', label="allmedals") + ggtitle('Percentage of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue")
div(ggplotly(forplotly.hostcountryadvantage), align = 'center')
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggthemes)
require(magrittr)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(extrafont)
require(ggrepel)
require(ggpubr)
require(rvest)
require(stringr)
require(grid)
require(gridExtra)
require(plotly)
require(DT)
require(shiny)
loadfonts()
setwd("~/Desktop")
winter <- read.csv('winter.csv')
countrystats <- read.csv('dictionary.csv')
#Dealing with Defunct Countries
winter$CountryRename <- ifelse(winter$Country=='URS', 'RUS', as.character(winter$Country))
winter$CountryRename <- ifelse(winter$Country=='EUN', 'RUS', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='GDR', 'GER', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='FRG', 'GER', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='EUA', 'GER', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='TCH', 'CZE', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='YUG', 'SCG', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='ROU', 'ROM', winter$CountryRename)
#Determining Host Country (For later question)
wiki_hosts <- read_html("https://en.wikipedia.org/wiki/Winter_Olympic_Games")
hosts <- html_table(html_nodes(wiki_hosts, "table")[[5]], fill=TRUE)
hosts <- hosts[-1,1:3]
hosts$City <- str_split_fixed(hosts$Host, n=2, ",")[,1]
hosts$Hostcountry <- str_split_fixed(hosts$Host, n=2, ", ")[,2]
hosts <- hosts[-c(5,6,25,26),]
hosts <- hosts[c("Year", "City", "Hostcountry")]
city.compare <- cbind(hosts$City, unique(paste(winter$Year, winter$City, sep=" ")))
winter$City <- ifelse(winter$City=='St.Moritz', 'St. Moritz', as.character(winter$City))
winter$City <- ifelse(winter$City=='Garmisch Partenkirchen', 'Garmisch-Partenkirchen', as.character(winter$City))
winter <- merge(winter, hosts, by=c("Year", "City"))
#Calculating Unique Medals and Creating Long Data by Medal Type (To ensure team sports only count once)
winter$uniquemedals <- paste(winter$Year, winter$Discipline, winter$Event, winter$Medal, winter$Gender, sep=" ")
country.allmedals.alltime <- winter %>% group_by(CountryRename, Medal) %>% summarize(total = length(unique(uniquemedals))) %>% ungroup()
colnames(country.allmedals.alltime)[colnames(country.allmedals.alltime)=="CountryRename"] <- "Code"
country.allmedals.alltime.withstats <- merge(country.allmedals.alltime, countrystats)
#Reshaping Long Data by Medal Type into Wide Data
country.allmedals.alltime.wide <- spread(country.allmedals.alltime, Medal, total)
country.allmedals.alltime.wide$Gold <- ifelse(is.na(country.allmedals.alltime.wide$Gold), 0, country.allmedals.alltime.wide$Gold)
country.allmedals.alltime.wide$Silver <- ifelse(is.na(country.allmedals.alltime.wide$Silver), 0, country.allmedals.alltime.wide$Silver)
country.allmedals.alltime.wide$Bronze <- ifelse(is.na(country.allmedals.alltime.wide$Bronze), 0, country.allmedals.alltime.wide$Bronze)
country.allmedals.alltime.wide$allmedals <- country.allmedals.alltime.wide$Gold + country.allmedals.alltime.wide$Silver + country.allmedals.alltime.wide$Bronze
colnames(country.allmedals.alltime.wide)[colnames(country.allmedals.alltime.wide)=="CountryRename"] <- "Code"
country.allmedals.alltime.wide.withstats <- merge(country.allmedals.alltime.wide, countrystats)
#Calculating Number of Games Each Country Medaled In
country.allmedals.alltime.yearswon <- winter %>% group_by(CountryRename) %>% summarize(yearswon = length(unique(Year))) %>% ungroup()
colnames(country.allmedals.alltime.yearswon)[colnames(country.allmedals.alltime.yearswon)=="CountryRename"] <- "Code"
country.allmedals.alltime.wide.withstats <- merge(country.allmedals.alltime.wide.withstats, country.allmedals.alltime.yearswon)
#Creating Plot of Number of Years Country Medaled by Country's Population
coul <- brewer.pal(11, "Spectral")
coul = colorRampPalette(coul)(40)
plot.country.allmedals.alltime.bypopulation <- ggplot(country.allmedals.alltime.wide.withstats, aes(x = log(Population), y = yearswon, label = Country)) + geom_point(aes(color=Country, size=allmedals), alpha = 0.5) + scale_size(range = c(1, 10)) + geom_text_repel(aes(label=Country), size=2.5, family="Garamond") + guides(color=FALSE) + scale_color_manual(values = coul) + xlab('Population (Log)') + ylab('Years With At Least One Medal Won') + guides(size=guide_legend(title="Total Medals")) + ggtitle("Country's Winter Olympic Success By Population") + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
plot.country.allmedals.alltime.bypopulation
#Filtering Top 10 Countries in Wide Data
top10country.allmedals.alltime.wide.withstats <- country.allmedals.alltime.wide.withstats %>% arrange(desc(allmedals)) %>% mutate(rank=row_number()) %>% filter(rank<=10)  %>% arrange(rank)
#Filtering Top 10 Countries in Long Data
top10country.allmedals.alltime.withstats <- country.allmedals.alltime.withstats %>% filter(Code %in% top10country.allmedals.alltime.wide.withstats$Code)
#Ordering Medal Types
top10country.allmedals.alltime.withstats$Medal <- as.factor(top10country.allmedals.alltime.withstats$Medal)
top10country.allmedals.alltime.withstats$Medal = factor(top10country.allmedals.alltime.withstats$Medal,levels(top10country.allmedals.alltime.withstats$Medal)[c(1,3,2)])
#Creating Plot of Medal Count By Country
plot.top10country.allmedals.alltime <- ggplot(top10country.allmedals.alltime.withstats, aes(y=total, x=reorder(Country, -total), fill = Medal)) + xlab('Country') + ylab('Medal Count') + ggtitle('Medal Count By Country') + theme_tufte() +theme(legend.position = c(0.9,0.9), legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + geom_bar(stat='identity') + scale_fill_manual(values=c("sienna", "slategray", "gold3"))
plot.top10country.allmedals.alltime
#Creating a Dataframe Matching Every Country to Every Olympic Date
winteryears<- c(1924, 1928, 1932, 1936, 1948, 1952, 1956, 1960,1964,1968,1972,1976,1980,1984,1988,1992,1994,1998,2002,2006,2010,2014)
countries <- country.allmedals.alltime.wide.withstats[c("Country")]
countries.winteryears <- merge(countries, winteryears)
colnames(countries.winteryears)[colnames(countries.winteryears)=="y"] <- "Year"
#Creating Long Data by Year
country.allmedals.byyear <-  winter %>% group_by(CountryRename, Year, Hostcountry) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup()
colnames(country.allmedals.byyear)[colnames(country.allmedals.byyear)=="CountryRename"] <- "Code"
country.allmedals.byyear.withstats <- merge(country.allmedals.byyear, countrystats)
#Recoding Years with No Medal Data to zero
country.allmedals.byyear.withstats <- full_join(countries.winteryears, country.allmedals.byyear.withstats, by=c("Country", "Year")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
#Filtering to Top 10 countries
top10country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats %>% filter(Country %in% top10country.allmedals.alltime.wide.withstats$Country)
#Ordering Countries by Rank
top10ranks <- top10country.allmedals.alltime.wide.withstats[c("Code", "rank")]
top10country.allmedals.byyear.withstats <- full_join(top10country.allmedals.byyear.withstats, top10ranks)
top10country.allmedals.byyear.withstats$Country <- as.factor(top10country.allmedals.byyear.withstats$Country)
top10country.allmedals.byyear.withstats$Country = factor(top10country.allmedals.byyear.withstats$Country, levels=unique(top10country.allmedals.byyear.withstats$Country[order(-top10country.allmedals.byyear.withstats$rank)]), ordered=TRUE)
#Creating Plot of Total Medals Over Time By Country
plot.top10country.allmedals.byyear <- ggplot(top10country.allmedals.byyear.withstats, aes(x=Year, y=allmedals, fill=Country)) + geom_area() + xlab('Year') + ylab('Total Medals') + ggtitle('Total Medals Over Time By Country') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_fill_brewer(palette="Spectral")
plot.top10country.allmedals.byyear
#Ranking Top 10 Countries For Each Gender
top10countries.allmedals.alltime.eachgender <- winter %>% group_by(CountryRename, Gender) %>% summarize(allmedals = length(unique(uniquemedals))) %>% arrange(desc(allmedals)) %>% group_by(Gender) %>% mutate(rank=row_number()) %>% filter(rank<=10) %>% arrange(Gender, rank)
top10countries.allmedals.alltime.women <-top10countries.allmedals.alltime.eachgender %>% filter(Gender=="Women")
colnames(top10countries.allmedals.alltime.women)[colnames(top10countries.allmedals.alltime.women)=="CountryRename"] <- "Code"
top10countries.allmedals.alltime.women <- merge(top10countries.allmedals.alltime.women, countrystats)
top10countries.allmedals.alltime.men <-top10countries.allmedals.alltime.eachgender %>% filter(Gender=="Men")
colnames(top10countries.allmedals.alltime.men)[colnames(top10countries.allmedals.alltime.men)=="CountryRename"] <- "Code"
top10countries.allmedals.alltime.men <- merge(top10countries.allmedals.alltime.men, countrystats)
#Filter Top Ten Countries By Year and Gender
country.allmedals.byyear.bygender <-  winter %>% group_by(CountryRename, Year, Hostcountry, Gender) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup()
colnames(country.allmedals.byyear.bygender)[colnames(country.allmedals.byyear.bygender)=="CountryRename"] <- "Code"
country.allmedals.byyear.bygender.withstats <- merge(country.allmedals.byyear.bygender, countrystats)
top10womencountry.allmedals.byyear.withstats <- country.allmedals.byyear.bygender.withstats %>% filter(Gender == 'Women')  %>% filter(Code %in% top10countries.allmedals.alltime.women$Code)
top10mencountry.allmedals.byyear.withstats <- country.allmedals.byyear.bygender.withstats %>% filter(Gender == 'Men') %>% filter(Code %in% top10countries.allmedals.alltime.men$Code)
#Determining Years where Country had 0 medals for Particular Genders
top10womencountries <- top10countries.allmedals.alltime.women[c("Country")]
top10womencountries.winteryears <- merge(top10womencountries, winteryears)
colnames(top10womencountries.winteryears)[colnames(top10womencountries.winteryears)=="y"] <- "Year"
top10womencountry.allmedals.byyear.withstats <- full_join(top10womencountries.winteryears, top10womencountry.allmedals.byyear.withstats, by=c("Country", "Year")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
top10mencountries <- top10countries.allmedals.alltime.men[c("Country")]
top10mencountries.winteryears <- merge(top10mencountries, winteryears)
colnames(top10mencountries.winteryears)[colnames(top10mencountries.winteryears)=="y"] <- "Year"
top10mencountry.allmedals.byyear.withstats <- full_join(top10mencountries.winteryears, top10mencountry.allmedals.byyear.withstats, by=c("Country", "Year")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
#Ordering Countries by Rank
top10womenranks <- top10countries.allmedals.alltime.women [c("Code", "rank")]
top10womencountry.allmedals.byyear.withstats <- full_join(top10womencountry.allmedals.byyear.withstats, top10womenranks)
top10womencountry.allmedals.byyear.withstats$Country <- as.factor(top10womencountry.allmedals.byyear.withstats$Country)
top10womencountry.allmedals.byyear.withstats$Country = factor(top10womencountry.allmedals.byyear.withstats$Country, levels=unique(top10womencountry.allmedals.byyear.withstats$Country[order(-top10womencountry.allmedals.byyear.withstats$rank)]), ordered=TRUE)
top10menranks <- top10countries.allmedals.alltime.men [c("Code", "rank")]
top10mencountry.allmedals.byyear.withstats <- full_join(top10mencountry.allmedals.byyear.withstats, top10menranks)
top10mencountry.allmedals.byyear.withstats$Country <- as.factor(top10mencountry.allmedals.byyear.withstats$Country)
top10mencountry.allmedals.byyear.withstats$Country = factor(top10mencountry.allmedals.byyear.withstats$Country, levels=unique(top10mencountry.allmedals.byyear.withstats$Country[order(-top10mencountry.allmedals.byyear.withstats$rank)]), ordered=TRUE)
#Creating Plot of Total Medals Over Time By Country and Gender
plot.top10womencountry.allmedals.byyear <- ggplot(top10womencountry.allmedals.byyear.withstats, aes(x=Year, y=allmedals, fill=Country)) + geom_area() + xlab('Year') + ylab('Total Medals') + ggtitle('Total Medals Over Time By Country (Women)') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_fill_brewer(palette="PiYG") + guides(fill=guide_legend(ncol=2))
plot.top10mencountry.allmedals.byyear <- ggplot(top10mencountry.allmedals.byyear.withstats, aes(x=Year, y=allmedals, fill=Country)) + geom_area() + xlab('Year') + ylab('Total Medals') + ggtitle('Total Medals Over Time By Country (Men)') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_fill_brewer(palette="RdBu") + guides(fill=guide_legend(ncol=2))
plot.gendertrend <- ggarrange(plot.top10womencountry.allmedals.byyear, plot.top10mencountry.allmedals.byyear, ncol = 1, nrow = 2, align='hv')
plot.gendertrend
#Calculate Score
country.allmedals.alltime.wide.withstats$score <- 3*country.allmedals.alltime.wide.withstats$Gold + 2*country.allmedals.alltime.wide.withstats$Silver + country.allmedals.alltime.wide.withstats$Bronze
#Adjust Score by Population and GDP
country.allmedals.alltime.wide.withstats$scorepopadj <- country.allmedals.alltime.wide.withstats$score/country.allmedals.alltime.wide.withstats$Population
country.allmedals.alltime.wide.withstats$scoregdpadj <- country.allmedals.alltime.wide.withstats$score/country.allmedals.alltime.wide.withstats$GDP.per.Capita
#Standardise Scores
country.allmedals.alltime.wide.withstats$"Standardized Score" <- scale(country.allmedals.alltime.wide.withstats$score)
country.allmedals.alltime.wide.withstats$"Population Adjusted Standardized Score" <- scale(country.allmedals.alltime.wide.withstats$scorepopadj)
country.allmedals.alltime.wide.withstats$"GDP per Capita Adjusted Standardized Score" <- scale(country.allmedals.alltime.wide.withstats$scoregdpadj)
country.allmedals.alltime.wide.withstats.scorepanel <- gather(country.allmedals.alltime.wide.withstats, key = scoretype, value = value, "Standardized Score", "Population Adjusted Standardized Score", "GDP per Capita Adjusted Standardized Score")
#Creating Plot of Standardized Scores by Country
plot.countryscores <- ggplot(country.allmedals.alltime.wide.withstats.scorepanel, aes(x=value, y=reorder(Country, score), group = 'scoretype', color = 'scoretype')) + geom_point(aes(color=scoretype), alpha = 0.8) + xlab('Score') + ylab('Country') + ggtitle('Standardized Scores By Country') + theme_tufte() +theme(panel.grid.major.y = element_line(colour="gray90"), legend.position = c(0.8, 0.5), legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_color_manual(values=c("tan2", "darkolivegreen2", "royalblue2")) + guides(color=guide_legend(title="Score Type"))
plot.countryscores
#Determining if a Country is a Host Country
country.allmedals.byyear.withstats$HostStatus <- ifelse(country.allmedals.byyear.withstats$Country==country.allmedals.byyear.withstats$Hostcountry, 'Host', NA)
#Calculating Percentage of Medals a Country Won in Each Year
totalyearmedals <- country.allmedals.byyear.withstats %>% group_by(Year) %>% summarize(totalyearmedals = sum(allmedals))
country.allmedals.byyear.withstats <- merge(country.allmedals.byyear.withstats, totalyearmedals)
country.allmedals.byyear.withstats$PctMedals <- (country.allmedals.byyear.withstats$allmedals/country.allmedals.byyear.withstats$totalyearmedals)*100
#Create Plot of Percentage of Medals Won Over Time
plot.hostcountryadvantage <- ggplot(country.allmedals.byyear.withstats, aes(x=as.character(Year), y=Country, fill = PctMedals)) + geom_tile() + labs(x='Year', y='Country', fill="Pct Medals") + ggtitle('Percentage Of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue") + geom_text(aes(label=HostStatus), size=3, family="Garamond", fontface='bold')
plot.hostcountryadvantage
#Subsetting Long Data by Scandinavian Countries, Taking into Account Year and Sport
scandinavia = subset(winter, CountryRename=='SWE'|CountryRename=='NOR'|CountryRename=='FIN')
scandinavia.allmedals.byevent.byyear <-  scandinavia %>% group_by(CountryRename, Year, Hostcountry, Sport) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup()
colnames(scandinavia.allmedals.byevent.byyear)[colnames(scandinavia.allmedals.byevent.byyear)=="CountryRename"] <- "Code"
scandinavia.allmedals.byevent.byyear.withstats <- merge(scandinavia.allmedals.byevent.byyear, countrystats)
#Determining Years where Country had 0 medals for Particular Sports
scandinavia.countries.winteryears <- subset(countries.winteryears, Country=='Sweden'|Country=='Norway'|Country=='Finland')
sport <- unique(winter$Sport)
scandinavia.countries.winteryears <- merge(scandinavia.countries.winteryears, sport)
colnames(scandinavia.countries.winteryears)[colnames(scandinavia.countries.winteryears)=="y"] <- "Sport"
scandinavia.allmedals.byevent.byyear.withstats <- full_join(scandinavia.countries.winteryears, scandinavia.allmedals.byevent.byyear.withstats, by=c("Country", "Year", "Sport")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
#Create Plot of Total Medals Over Time By Sport
plot.scandinavia.byevent <- ggplot(scandinavia.allmedals.byevent.byyear.withstats, aes(x=Year, y=allmedals, color=Sport)) + geom_line() + facet_grid(Country ~.) + xlab('Year') + ylab('Total Medals') + ggtitle('Total Medals Over Time By Sport (Scandinavia)') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_color_brewer(palette="Set2") + guides(color=guide_legend(title="Sport"))
plot.scandinavia.byevent
#Subsetting Long Data by Scandinavian Countries, Taking into Account Year and Sport and Gender
scandinavia.allmedals.byevent.bygender.byyear <-  scandinavia %>% group_by(CountryRename, Year, Hostcountry, Gender, Sport) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup()
colnames(scandinavia.allmedals.byevent.bygender.byyear)[colnames(scandinavia.allmedals.byevent.bygender.byyear)=="CountryRename"] <- "Code"
scandinavia.allmedals.byevent.bygender.byyear.withstats <- merge(scandinavia.allmedals.byevent.bygender.byyear, countrystats)
women.scandinavia.allmedals.byevent.byyear.withstats  <- scandinavia.allmedals.byevent.bygender.byyear.withstats  %>% filter(Gender=="Women")
men.scandinavia.allmedals.byevent.byyear.withstats  <- scandinavia.allmedals.byevent.bygender.byyear.withstats  %>% filter(Gender=="Men")
#Determining Years where Country had 0 medals for Particular Sports
women.scandinavia.allmedals.byevent.byyear.withstats <- full_join(scandinavia.countries.winteryears, women.scandinavia.allmedals.byevent.byyear.withstats, by=c("Country", "Year", "Sport")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
men.scandinavia.allmedals.byevent.byyear.withstats <- full_join(scandinavia.countries.winteryears, men.scandinavia.allmedals.byevent.byyear.withstats, by=c("Country", "Year", "Sport")) %>% mutate(allmedals = ifelse(is.na(allmedals), 0, allmedals))
#Create Plot of Total Medals Over Time By Sport for Men and Women
plot.men.scandinavia.byevent <- ggplot(men.scandinavia.allmedals.byevent.byyear.withstats, aes(x=Year, y=allmedals, group=Sport, color=Sport)) + geom_line() + facet_grid(Country ~.) + xlab('Year') + ylab('Total Medals') + ggtitle('Men') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, size=14), text=element_text(family="Garamond")) + scale_color_brewer(palette="Set2") + guides(color=guide_legend(title="Sport"))
plot.women.scandinavia.byevent <- ggplot(women.scandinavia.allmedals.byevent.byyear.withstats, aes(x=Year, y=allmedals, group=Sport, color=Sport)) + geom_line() + facet_grid(Country ~.) + xlab('Year') + ylab('Total Medals') + ggtitle('Women') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, size=14), text=element_text(family="Garamond")) + scale_color_brewer(palette="Set2") + guides(color=guide_legend(title="Sport"))
plot.scandinavia.gender.trend <- ggarrange(plot.women.scandinavia.byevent, plot.men.scandinavia.byevent , ncol = 2, nrow = 1, align='hv', common.legend = T, legend = "bottom")
plot.scandinavia.gender.trend <- grid.arrange(plot.scandinavia.gender.trend, top =textGrob("Total Medals Over Time By Sport (Scandinavia)", gp=gpar(fontsize=14,fontfamily="Garamond",fontface="bold")))
#Creating Long Data by Athlete
athletes.allmedals <- winter %>% group_by(CountryRename, Gender, Sport, Athlete) %>% summarize(allmedals = length(unique(uniquemedals))) %>% ungroup() %>% arrange(desc(allmedals))
colnames(athletes.allmedals)[colnames(athletes.allmedals)=="CountryRename"] <- "Code"
athletes.allmedals.withstats <- merge(athletes.allmedals, countrystats)
#Ranking Athletes and Filtering to Top 10
athletes.allmedals.withstats$rank <- rank(-athletes.allmedals.withstats$allmedals, na.last = TRUE, ties.method = "min")
top10athletes.allmedals.withstats <- subset(athletes.allmedals.withstats, athletes.allmedals.withstats$rank <= 10)
#Cleaning names of Athletes
top10athletes.allmedals.withstats$Athlete <- ifelse(top10athletes.allmedals.withstats$allmedals==12, "DAEHLIE, Bjorn", as.character(top10athletes.allmedals.withstats$Athlete))
#Distinguishing Women Athletes
top10athletes.allmedals.withstats$Italic <- ifelse(top10athletes.allmedals.withstats$Gender=='Women', "italic", "plain")
#Create Plot of Total Medals Over Time By Athlete
top10athletes.allmedals.withstats <- top10athletes.allmedals.withstats %>% arrange(desc(allmedals), Athlete)
plot.topathletes <- ggplot(top10athletes.allmedals.withstats, aes(x=allmedals, y=reorder(Athlete, -allmedals))) + geom_point(aes(color=Country, shape=Sport)) + xlab('Total Medals') + ylab('Athlete') + ggtitle('Total Medals By Athlete') + theme_tufte() +theme(axis.text.y = element_text(face = top10athletes.allmedals.withstats$Italic), panel.grid.major.y = element_line(colour="gray90"), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_color_brewer(palette = "Dark2") + guides(color=guide_legend(title="Country")) + guides(shape=guide_legend(title="Sport"))
plot.topathletes
forplotly.country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats
forplotly.country.allmedals.byyear.withstats$Year <- as.character(forplotly.country.allmedals.byyear.withstats$Year)
forplotly.hostcountryadvantage <- ggplot(forplotly.country.allmedals.byyear.withstats, aes(x=Year, y=Country, fill = PctMedals, label = "allmedals")) + geom_tile() + labs(x='Year', y='Country', fill="Pct Medals") + ggtitle('Percentage of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue") + geom_text(aes(label=HostStatus), size=3, family="Garamond", fontface='bold')
div(ggplotly(forplotly.hostcountryadvantage, tooltip = c("Year", "Country", "PctMedals", "HostStatus", "allmedals")), align = 'center')
forplotly.scandinavia.allmedals.byevent.byyear.withstats <- scandinavia.allmedals.byevent.byyear.withstats
colnames(forplotly.scandinavia.allmedals.byevent.byyear.withstats)[colnames(forplotly.scandinavia.allmedals.byevent.byyear.withstats)=="allmedals"] <- "TotalMedals"
forplotly.scandinavia.byevent <- ggplot(forplotly.scandinavia.allmedals.byevent.byyear.withstats, aes(x=Year, y=TotalMedals, color=Sport)) + geom_line() + facet_grid(Country ~.) + labs(x='Year', y='Total Medals', color='Sport') + ggtitle('Total Medals Over Time By Sport (Scandinavia)') + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond")) + scale_color_brewer(palette="Set2")
div(ggplotly(forplotly.scandinavia.byevent, tooltip = c("Year", "Sport", "TotalMedals")), align = 'center')
fordatatable.country.allmedals.alltime.wide.withstats <- country.allmedals.alltime.wide.withstats
fordatatable.country.allmedals.alltime.wide.withstats <- fordatatable.country.allmedals.alltime.wide.withstats[,c(6,1,5,2,3,4,10,13,14,15,7,8,9)]
colnames(fordatatable.country.allmedals.alltime.wide.withstats)[colnames(fordatatable.country.allmedals.alltime.wide.withstats)=="allmedals"] <- "Total Medals"
colnames(fordatatable.country.allmedals.alltime.wide.withstats)[colnames(fordatatable.country.allmedals.alltime.wide.withstats)=="score"] <- "Olympic Score"
colnames(fordatatable.country.allmedals.alltime.wide.withstats)[colnames(fordatatable.country.allmedals.alltime.wide.withstats)=="GDP.per.Capita"] <- "GDP Per Capita"
colnames(fordatatable.country.allmedals.alltime.wide.withstats)[colnames(fordatatable.country.allmedals.alltime.wide.withstats)=="yearswon"] <- "Years Medaled"
fordatatable.country.allmedals.alltime.wide.withstats[,c('Standardized Score', 'Population Adjusted Standardized Score', 'GDP per Capita Adjusted Standardized Score', 'GDP Per Capita')]=round(fordatatable.country.allmedals.alltime.wide.withstats[,c('Standardized Score', 'Population Adjusted Standardized Score', 'GDP per Capita Adjusted Standardized Score', 'GDP Per Capita')],2)
datatable(fordatatable.country.allmedals.alltime.wide.withstats, options = list(autoWidth = TRUE)) %>% formatStyle('Country',  color = 'white', backgroundColor = 'slategray', fontWeight = 'bold')
forplotly.country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats
forplotly.country.allmedals.byyear.withstats$Year <- as.character(forplotly.country.allmedals.byyear.withstats$Year)
forplotly.hostcountryadvantage <- ggplot(forplotly.country.allmedals.byyear.withstats, aes(x=Year, y=Country, fill = PctMedals, label = "allmedals")) + geom_tile() + labs(x='Year', y='Country', fill="Pct Medals") + ggtitle('Percentage of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue")
div(ggplotly(forplotly.hostcountryadvantage, tooltip = c("Year", "Country", "PctMedals", "HostStatus", "allmedals")), align = 'center')
forplotly.country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats
forplotly.country.allmedals.byyear.withstats$Year <- as.character(forplotly.country.allmedals.byyear.withstats$Year)
forplotly.hostcountryadvantage <- ggplot(forplotly.country.allmedals.byyear.withstats, aes(x=Year, y=Country, fill = PctMedals, label1 = "allmedals")) + geom_tile() + labs(x='Year', y='Country', fill="Pct Medals") + ggtitle('Percentage of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue")
div(ggplotly(forplotly.hostcountryadvantage, tooltip = c("Year", "Country", "PctMedals", "HostStatus", "allmedals")), align = 'center')
forplotly.country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats
forplotly.country.allmedals.byyear.withstats$Year <- as.character(forplotly.country.allmedals.byyear.withstats$Year)
forplotly.hostcountryadvantage <- ggplot(forplotly.country.allmedals.byyear.withstats, aes(x=Year, y=Country, fill = PctMedals, label = allmedals)) + geom_tile() + labs(x='Year', y='Country', fill="Pct Medals") + ggtitle('Percentage of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue") + geom_text(aes(label=HostStatus), size=3, family="Garamond", fontface='bold')
div(ggplotly(forplotly.hostcountryadvantage, tooltip = c("Year", "Country", "PctMedals", "HostStatus", "allmedals")), align = 'center')
forplotly.country.allmedals.byyear.withstats <- country.allmedals.byyear.withstats
forplotly.country.allmedals.byyear.withstats$Year <- as.character(forplotly.country.allmedals.byyear.withstats$Year)
forplotly.hostcountryadvantage <- ggplot(forplotly.country.allmedals.byyear.withstats, aes(x=Year, y=Country, fill = PctMedals, label2 = allmedals)) + geom_tile() + labs(x='Year', y='Country', fill="Pct Medals") + ggtitle('Percentage of Medals Won Over Time') + theme_tufte() +theme(axis.ticks=element_blank(), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))  + scale_fill_gradient(low = "whitesmoke",high = "steelblue") + geom_text(aes(label=HostStatus), size=3, family="Garamond", fontface='bold')
div(ggplotly(forplotly.hostcountryadvantage, tooltip = c("Year", "Country", "PctMedals", "HostStatus", "allmedals")), align = 'center')
